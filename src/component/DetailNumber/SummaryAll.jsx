import { useSelector } from "react-redux";
import tomtat from "../../assets/img/tomtat.png";
import {
  STRONG_NUMB,
  WEAK_NUMB,
  ARROW,
  NUMEROLOGY_LIFE_PATH,
  NUMEROLOGY_SOUL_NUMBER,
  NUMERLOGY_COMMON,
  NUMERLOGY_JOB,
  SOLUTION_NUMB,
} from "../../Data/numerology";
import parse from "html-react-parser";
import { Fragment } from "react";

function SummaryAll() {
  const strongNumb = useSelector((state) => state.numberKarmaMain.strong_list);

  const newStrongNumb = strongNumb
    .map((numb, index) => (STRONG_NUMB[numb] ? STRONG_NUMB[numb] : null))
    .reduce((acc, obj) => {
      return { ...acc, ...obj };
    }, {});

  const weakNumb = useSelector((state) => state.numberKarmaMain.weak_list);
  const arrow = useSelector((state) => state.numberKarmaMain.arrow);
  const lack_arrow = useSelector((state) => state.numberKarmaMain.lack_arrow);
  const numberSoul = useSelector((state) => state.numberName.soul);
  const numberDestiny = useSelector((state) => state.numberName.destiny);
  const numberKarma = useSelector((state) => state.numberKarmaMain.number);

  // DEM DE NHOM DONG

  const keys = Object.keys(newStrongNumb);
  const totalItems = keys.length;

  // ‚úÖ Chia l√†m 3 nh√≥m g·∫ßn b·∫±ng nhau
  const groupCount = 3;
  const baseSize = Math.floor(totalItems / groupCount);
  const remainder = totalItems % groupCount;

  const groups = [];
  let start = 0;

  for (let i = 0; i < groupCount; i++) {
    const size = baseSize + (i < remainder ? 1 : 0); // th√™m 1 cho c√°c nh√≥m ƒë·∫ßu n·∫øu d∆∞
    groups.push(keys.slice(start, start + size));
    start += size;
  }

  return (
    <div id="summary_all">
      <div className="container">
        <h1 className=" h1 my-5 px-2">
          <b className="text-info"> &nbsp; &nbsp;Xu h∆∞·ªõng ngh·ªÅ nghi·ªáp </b> v√†{" "}
          <b className="text-danger"> T√≥m t·∫Øt </b>v·ªÅ b·∫°n{" "}
        </h1>
        <img className=" my-1 w-100" style={{ scale: 1 }} src={tomtat} />

        <div className="m-3  px-3 py-4    border border-dark-subtle rounded  ">
          <h4 className=" mt-3 px-2">ƒêI·ªÇM M·∫†NH C·ª¶A B·∫†N</h4>
          <p class="text-danger mb-5">
            L√† t√†i nƒÉng, nƒÉng l·ª±c, kh·∫£ nƒÉng, ƒë·∫∑c ƒëi·ªÉm ch·ªß ƒë·∫°o c·ªßa b·∫°n
          </p>
          {groups.map((group, index) => (
            <div key={index}>
              {group.map((key, subIndex) => (
                <Fragment key={subIndex}>{parse(newStrongNumb[key])}</Fragment>
              ))}
              {index < groups.length - 1 && <div className="mt-5" />}{" "}
              {/* c√°ch d√≤ng gi·ªØa c√°c nh√≥m */}
            </div>
          ))}
          {arrow.length > 0 &&
            arrow.map((arr, iAr) => {
              return (
                <Fragment key={`emp${iAr}`}>
                  {parse(ARROW[arr][1].KET_LUAN)}
                </Fragment>
              );
            })}
        </div>

        <div className="m-3  px-3 py-4   border border-dark-subtle rounded  ">
          <h4 className=" mt-3 px-2">ƒêI·ªÇM Y·∫æU C·ª¶A B·∫†N</h4>
          <p class="text-primary">
            L√† nh∆∞·ª£c ƒëi·ªÉm, b√†i h·ªçc, khuy·∫øt ƒëi·ªÉm c·ªßa b·∫°n
          </p>
          <div>
            {weakNumb.map((numb, index) => {
              return (
                <div className="mt-5" key={index}>
                  {WEAK_NUMB[numb] && WEAK_NUMB[numb].noidung
                    ? parse(WEAK_NUMB[numb].noidung)
                    : null}
                </div>
              );
            })}
          </div>
          {/* <div className="">
            {lack_arrow.length > 0 &&
              lack_arrow.map((arr, iAr) => {
                return (
                  <Fragment key={`emp${iAr}`}>
                    {parse(ARROW[arr][0].KET_LUAN)}
                  </Fragment>
                );
              })}
          </div> */}
        </div>

        <div className="m-3  p-3    border border-dark-subtle rounded  ">
          <h4 className=" mt-3 px-2">ƒê·ªòNG L·ª∞C TH·ªéA M√ÉN</h4>
          <p class="text-danger">L√† khao kh√°t n·ªôi t√¢m, mong mu·ªën, s·ª© m·ªánh</p>
          <p>
            {NUMEROLOGY_LIFE_PATH[numberDestiny] &&
            NUMEROLOGY_LIFE_PATH[numberDestiny].tomtat
              ? parse(NUMEROLOGY_LIFE_PATH[numberDestiny].tomtat)
              : ""}
          </p>
          <p>
            {NUMEROLOGY_SOUL_NUMBER[numberSoul] &&
            NUMEROLOGY_SOUL_NUMBER[numberSoul].tomtat
              ? parse(NUMEROLOGY_SOUL_NUMBER[numberSoul].tomtat)
              : ""}
          </p>
          <p>
            {NUMEROLOGY_SOUL_NUMBER[numberKarma] &&
            NUMEROLOGY_SOUL_NUMBER[numberKarma]
              ? parse(NUMEROLOGY_SOUL_NUMBER[numberKarma].tomtat)
              : ""}
          </p>
        </div>
        <div className="m-3  p-3 career-container border border-dark-subtle rounded  ">
          <h4 className="  mt-3 px-2 ">XU H∆Ø·ªöNG NGH·ªÄ NGHI·ªÜP</h4>
          <p class="text-danger">
            ƒê√¢y l√† g·ª£i √Ω xu h∆∞·ªõng ngh·ªÅ nghi·ªáp d·ª±a tr√™n nƒÉng l∆∞·ª£ng thu·∫ßn trong b·ªô
            s·ªë c·ªßa B·∫°n, trong th·ª±c t·∫ø ƒë·ªÉ ch·ªçn ƒë∆∞·ª£c ngh·ªÅ nghi·ªáp ph√π h·ª£p B·∫°n c·∫ßn
            x√©t th√™m nh·ªØng y·∫øu t·ªë kh√°c nh∆∞: Ngu·ªìn l·ª±c (t√†i nƒÉng th·ª±c t·∫ø) v√† l·ª£i
            th·∫ø c·∫°nh tranh (m·ªëi quan h·ªá, truy·ªÅn th·ªëng, gia ƒë√¨nh, t√†i ch√≠nh, n∆°i
            ·ªü ..vv) c·ªßa B·∫°n ƒë·ªÉ B·∫°n l·ª±a ch·ªçn ƒë∆∞·ª£c ngh·ªÅ nghi·ªáp ph√π h·ª£p nh·∫•t.
          </p>

          <div class="career-grid">
            {strongNumb.map((numb, index) =>
              NUMERLOGY_JOB[numb] && NUMERLOGY_JOB[numb].noidung ? (
                <div className="mt-4" key={index}>
                  {parse(NUMERLOGY_JOB[numb].noidung)}
                </div>
              ) : null
            )}
          </div>
        </div>
        <div className="m-3  p-3  conclude  border border-dark-subtle rounded  ">
          <h4 className="  mt-3 px-2 title"> L·ªúI KHUY√äN V√Ä C√ÅCH PH√ÅT TRI·ªÇN</h4>
          <p class="text-danger">
            L√† nh·ªØng ƒë·ªÅ xu·∫•t ph√°t tri·ªÉn gi√∫p b·∫°n tr·ªü n√™n ho√†n thi·ªán h∆°n
          </p>
          <div>
            {weakNumb.map((numb, index) => {
              return (
                <div
                  className={`mt-5 section ${index % 2 === 0 ? "even" : "odd"}`}
                  key={index}
                >
                  {SOLUTION_NUMB[numb] && SOLUTION_NUMB[numb].noidung
                    ? parse(SOLUTION_NUMB[numb].noidung)
                    : null}
                </div>
              );
            })}
          </div>

          <div class="note-box row">
          
            <div className=" ">
              <strong>üö´ L∆ØU √ù: </strong> Nh·ªØng ngh·ªÅ n√™u tr√™n kh√¥ng ph·∫£i b·∫°n
              kh√¥ng l√†m ƒë∆∞·ª£c m√† b·∫°n c·∫ßn ph·∫£i n·ªó l·ª±c nhi·ªÅu h∆°n ƒë·ªÉ b√π ƒë·∫Øp{" "}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default SummaryAll;
